var a = "constant_string";
var b = 32;
var c = a + b;

## Instruction Set ##
/* It's a start! */

PUSHT - Pushes a empty table to the stack
PUSHC n - Pushes constant n to the stack
LOAD n - Pushes local n, if n is positive. Pushed arg n+2 if n i negative
STORE n - Same as above expect pop the stack into memory


#### Data ####

CONSTANT_TABLE:
0 - Type: string, Val: "constant_string"
1 - Type: integer, Val: 32

CODE:

PUSHC 0 ; Push constant 0 to the stack
STORE 1 ; Store the value at the top of the stack in local variable 1
PUSHC 1 ; Push constant 1 to the stack
STORE 2 ; Store the value at the top of the stack in local variable 2
LOAD 1  ; Push local variable 1 to the stack
LOAD 2  ; Push local variable 2 to the stack
STR_CAT ; Concatonate the two values at the top of the stack
STORE 3 ; Store the value at the top of the stack in local variable 3

BINARY:

typedef struct {
	u8 type;
	u8 *data;
} SLConstant;

typedef struct {
	char header[2];
	u8 version;
	u16 num_constants;
	SLConstant *constants;
	u32 code_length;
	u8 *code;
} SLBinary;
